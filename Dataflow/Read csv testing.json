{"dataflow":{"dfKey":"19640de0-e374-4136-9547-22c42d8441f1","name":"Read csv testing","tags":null,"description":null,"definition":"{\"name\":\"Read csv testing\",\"engineVariableName\":\"\",\"components\":[{\"udfNames\":[],\"componentId\":0,\"componentName\":\"startComponent\",\"tableName\":\"\",\"category\":\"Start\",\"componentType\":\"UDF\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":0,\"dependencies\":[],\"className\":\"com.datagaps.dataflow.models.UDFComponent\",\"executionOption\":\"\",\"excludeNotification\":\"Y\"},{\"format\":\"csv\",\"enableSchema\":\"N\",\"schema\":[],\"fileMetadata\":[],\"enableTrim\":\"N\",\"failComponentWhenDatasetEmpty\":\"N\",\"componentId\":1,\"componentName\":\"File 1\",\"tableName\":\"File_1\",\"category\":\"Source\",\"componentType\":\"File\",\"rank\":0,\"dataSourceName\":\"CSV_shared_81\",\"displayRows\":50,\"dependencies\":[],\"options\":{\"delimiter\":\",\",\"header\":\"true\",\"inferSchema\":\"true\",\"path\":\"synthetic_financial_data_modified_16_07.csv\",\"Encoding\":\"\"},\"className\":\"com.datagaps.dataflow.models.FileComponent\",\"isCheckpointEnabled\":\"N\",\"dataSourceLogicalName\":\"\",\"executionOption\":\"\",\"excludeNotification\":\"N\"},{\"pluginId\":\"8187ede8-92da-4a77-9a04-79206d3ec18f\",\"pluginName\":\"Read CSV File with Header check\",\"pluginOptions\":{\"parameters\":[{\"parameterId\":\"e25b484a-13e4-4b76-bf10-6b16dfb171fb\",\"fieldName\":\"filename\",\"displayName\":\"File Name\",\"value\":\"synthetic_financial_data_modified_16_07.csv\",\"dataType\":\"String\"},{\"parameterId\":\"190b8a0a-37cf-4ad5-a75e-35ff02d01d30\",\"fieldName\":\"delimiter\",\"displayName\":\"delimiter\",\"value\":\",\",\"dataType\":\"String\"},{\"parameterId\":\"30cfef59-10eb-4cb4-9b77-1f9130fe1dd5\",\"fieldName\":\"hasheader\",\"displayName\":\"Has Header\",\"value\":\"True\",\"dataType\":\"Choice\"},{\"parameterId\":\"b93dd96c-d0b9-4f7f-b3f1-60a53e1c4e94\",\"fieldName\":\"skip_footer\",\"displayName\":\"Skip Footer Row\",\"value\":\"No\",\"dataType\":\"Choice\"}],\"inputDatasets\":[],\"outputDatasets\":[{\"outputDatasetId\":\"11955361-5509-4624-8258-235c548d5f9f\",\"fieldName\":\"datasetname\",\"displayName\":\"Enter Output Dataset Name\",\"value\":\"2024_Sales\"}],\"dataSources\":[{\"paramId\":\"12bf2a28-f4c4-4ac4-920c-8e953d92f97b\",\"fieldName\":\"file_ds\",\"displayName\":\"File Data Source\",\"value\":\"4301\",\"dataSourceName\":\"CSV_shared_81\"},{\"paramId\":\"85503741-94a8-439c-a7e3-c4a477c5b376\",\"fieldName\":\"local_ds\",\"displayName\":\"Select Local File Source\",\"value\":\"4301\",\"dataSourceName\":\"CSV_shared_81\"}],\"additionalProps\":[]},\"hideDatasets\":\"N\",\"componentId\":2,\"componentName\":\"Plugin 2\",\"tableName\":\"\",\"category\":\"Processor\",\"componentType\":\"Plugin\",\"rank\":0,\"displayRows\":0,\"dependencies\":[],\"options\":{},\"className\":\"com.datagaps.dataflow.models.PluginComponent\",\"executionOption\":\"\",\"excludeNotification\":\"N\"},{\"code\":\"import pandas as pd\\r\\nimport os\\r\\nimport smbclient\\r\\nimport pyarrow as pa\\r\\nimport pyarrow.parquet as pq\\r\\nfrom pyspark.sql.types import *\\r\\nfrom py4j.java_gateway import java_import\\r\\njava_import(spark._sc._jvm, \\\"org.apache.spark.sql.api.python.*\\\")\\r\\n\\r\\ndef getTempFilePath():\\r\\n    conn_map_local \\u003d spark.sparkContext._jvm.com.datagaps.core.engine.utils.CodeUtils.getConnectionParams(\\\"CSV_FileWatch\\\",\\\"read\\\")\\r\\n    conn_local \\u003d[conn_map_local.toList().apply(i) for i in range(conn_map_local.size())]\\r\\n    conn_details\\u003d {i._1(): i._2() for i in conn_local}\\r\\n    connPath\\u003dconn_details[\\\"path\\\"]\\r\\n    parquet_path \\u003d os.path.join(connPath,\\\"temp_2024_sales_1\\\"+\\\".parquet\\\")\\r\\n    return parquet_path\\r\\n \\r\\n \\r\\n  \\r\\n    \\r\\nconn_map_local\\u003dspark.sparkContext._jvm.com.datagaps.core.engine.utils.CodeUtils.getConnectionParams(\\\"CSV_shared_81\\\",\\\"read\\\")\\r\\n\\r\\nconn_local\\u003d[conn_map_local.toList().apply(i) for i in range(conn_map_local.size())]\\r\\n\\r\\n\\r\\nconn_file_details\\u003d {i._1(): i._2() for i in conn_local}\\r\\nconnPath\\u003dconn_file_details[\\\"path\\\"].split(\\\":\\\")[1]\\r\\n\\r\\nfilePath \\u003d os.path.join(connPath+\\\"2024_Sales_1.csv\\\")\\r\\nheader \\u003d None if \\\"True\\\" \\u003d\\u003d \\\"False\\\" else 0\\r\\nskip_footer \\u003d \\\"Yes\\\"\\r\\n\\r\\nprint(conn_file_details[\\u0027path\\u0027])\\r\\nif(conn_file_details[\\\"path\\\"].startswith(\\u0027smb:\\u0027)):\\r\\n    if conn_file_details[\\\"impersonate\\\"]\\u003d\\u003d\\\"false\\\":\\r\\n    \\tsmbclient.ClientConfig()\\r\\n    else:\\r\\n    \\tusername\\u003dconn_file_details[\\\"userName\\\"]\\r\\n    \\tpassword\\u003dspark.sparkContext._jvm.com.datagaps.core.engine.utils.CodeUtils.getDecryptedPassword(conn_file_details[\\\"password\\\"])\\r\\n    \\tsmbclient.ClientConfig(username\\u003dusername, password\\u003dpassword)\\r\\n    \\twith smbclient.open_file(filePath,mode\\u003d\\\"rb\\\") as fd:\\r\\n    \\t    dfdata \\u003d pd.read_csv(fd, header\\u003dNone,delimiter\\u003d\\\",\\\", skip_blank_lines\\u003d True,index_col\\u003dFalse,na_filter\\u003dFalse,low_memory\\u003dFalse,on_bad_lines\\u003d\\u0027error\\u0027)\\r\\n    \\t    \\r\\n    \\t    if \\\"True\\\" \\u003d\\u003d \\\"True\\\":\\r\\n                dfdata \\u003d dfdata.set_axis(dfdata.iloc[0], axis\\u003d1)\\r\\n                if(skip_footer):\\r\\n                    dfdata \\u003d dfdata.iloc[1:-1]\\r\\n                else: \\r\\n                    dfdata \\u003d dfdata.iloc[1:]\\r\\n            sdf\\u003d spark.createDataFrame(dfdata)\\r\\n\\r\\n            sdf.createOrReplaceTempView(\\\"indian_store\\\")\\r\\n\\r\\n    \\t    \\r\\n    \\t    \\r\\n    \\t    \\r\\n    \\t    \",\"kind\":\"pyspark\",\"dataSourceId\":0,\"hideDatasets\":\"N\",\"componentId\":3,\"componentName\":\"Code 3\",\"tableName\":\"\",\"category\":\"Processor\",\"componentType\":\"Code\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":50,\"dependencies\":[],\"options\":{},\"className\":\"com.datagaps.dataflow.models.CodeComponent\",\"executionOption\":\"\",\"excludeNotification\":\"N\"},{\"code\":\"import pandas as pd\\nimport os\\nimport smbclient\\nimport pyarrow as pa\\nimport pyarrow.parquet as pq\\n\\nfrom pyspark.sql.types import *\\nfrom py4j.java_gateway import java_import\\njava_import(spark._sc._jvm, \\\"org.apache.spark.sql.api.python.*\\\")\\n\\n\\ndef getTempFilePath():\\n    conn_map_local \\u003d spark.sparkContext._jvm.com.datagaps.core.engine.utils.CodeUtils.getConnectionParams(\\\"CSV_shared_81\\\",\\\"read\\\")\\n    conn_local \\u003d[conn_map_local.toList().apply(i) for i in range(conn_map_local.size())]\\n    conn_details\\u003d {i._1(): i._2() for i in conn_local}\\n    connPath\\u003dconn_details[\\\"path\\\"]\\n    parquet_path \\u003d os.path.join(connPath,\\\"2024_Sales_1\\\"+\\\".parquet\\\")\\n    return parquet_path\\n    \\n    \\nconn_map_local\\u003dspark.sparkContext._jvm.com.datagaps.core.engine.utils.CodeUtils.getConnectionParams(\\\"CSV_shared_81\\\",\\\"read\\\")\\nconn_local\\u003d[conn_map_local.toList().apply(i) for i in range(conn_map_local.size())]\\nconn_file_details\\u003d {i._1(): i._2() for i in conn_local}\\nconnPath\\u003dconn_file_details[\\\"path\\\"].split(\\\":\\\")[1]\\n\\nfilePath \\u003d os.path.join(connPath+\\\"2024_Sales_1.csv\\\")\\nheader \\u003d None if \\\"True\\\" \\u003d\\u003d \\\"False\\\" else 0\\nskip_footer \\u003d \\\"Yes\\\"\\nif(conn_file_details[\\\"path\\\"].startswith(\\u0027smb:\\u0027)):\\n    if conn_file_details[\\\"impersonate\\\"]\\u003d\\u003d\\\"false\\\":\\n    \\tsmbclient.ClientConfig()\\n    else:\\n    \\tusername\\u003dconn_file_details[\\\"userName\\\"]\\n    \\tpassword\\u003dspark.sparkContext._jvm.com.datagaps.core.engine.utils.CodeUtils.getDecryptedPassword(conn_file_details[\\\"password\\\"])\\n    \\tsmbclient.ClientConfig(username\\u003dusername, password\\u003dpassword)\\n    \\t\\n    with smbclient.open_file(filePath,mode\\u003d\\\"rb\\\") as fd:\\n        dfdata \\u003d pd.read_csv(fd, header\\u003dNone,delimiter\\u003d\\\",\\\", skip_blank_lines\\u003d True,index_col\\u003dFalse,na_filter\\u003dFalse,low_memory\\u003dFalse,on_bad_lines\\u003d\\u0027error\\u0027)\\n        if \\\"True\\\" \\u003d\\u003d \\\"True\\\":\\n            dfdata \\u003d dfdata.set_axis(dfdata.iloc[0], axis\\u003d1)\\n            if(skip_footer):\\n                dfdata \\u003d dfdata.iloc[1:-1]\\n            else: \\n                dfdata \\u003d dfdata.iloc[1:]\\n        sdf\\u003d spark.createDataFrame(dfdata)\\n        # table \\u003d pa.Table.from_pandas(dfdata)\\n        # parquet_path \\u003d getTempFilePath()\\n        # pq.write_table(table, parquet_path)\\n        # sdf \\u003d spark.read.parquet(parquet_path)\\n        sdf.createOrReplaceTempView(\\\"2024_Sales_1\\\")\\n\",\"kind\":\"pyspark\",\"dataSourceId\":0,\"hideDatasets\":\"N\",\"componentId\":5,\"componentName\":\"Code 5\",\"tableName\":\"\",\"category\":\"Processor\",\"componentType\":\"Code\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":50,\"dependencies\":[],\"options\":{},\"className\":\"com.datagaps.dataflow.models.CodeComponent\",\"executionOption\":\"\",\"excludeNotification\":\"N\"},{\"partitionOptions\":{\"partitionType\":\"\",\"name\":\"\"},\"easyQueryDefJson\":{\"sqlQuery\":\"\"},\"componentId\":6,\"componentName\":\"SQL 6\",\"tableName\":\"SQL_6\",\"category\":\"Processor\",\"componentType\":\"SQL\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":50,\"dependencies\":[],\"options\":{\"dbTable\":\"select * from 2024_Sales\"},\"className\":\"com.datagaps.dataflow.models.SQLComponent\",\"isCheckpointEnabled\":\"N\",\"executionOption\":\"\",\"excludeNotification\":\"N\"}],\"isDeleteWorkSchemaTable\":\"N\"}","parameters":"[{\"type\":\"static\",\"name\":\"limit_rows\",\"defValueInInteractiveMode\":\"limit 10\",\"defValueInBatchMode\":\"limit 1000\"}]","version":3,"maxComponentId":6,"livyOptions":null,"isDeleted":"N","userName":null,"type":"dataflow","environmentName":"","folderPath":"Dataflow","workSchemaName":null,"diagramSchema":"{\"isCustom\":false,\"diagramDef\":[]}"},"analysis":[],"datamodels":[],"tagDetails":[],"dataCompares":[],"filterDatasetMappings":[],"referenceDatasets":"{\"2\":[]}"}